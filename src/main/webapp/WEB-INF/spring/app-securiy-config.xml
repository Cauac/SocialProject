<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd">

    <http auto-config="true" use-expressions="true">
        <intercept-url pattern="/resources/html/secure/*" access="hasRole('ROLE_USER')"/>
        <intercept-url pattern="/*" access="permitAll"/>
        <form-login login-page="/#/login" authentication-success-handler-ref="successHandler"
                    authentication-failure-handler-ref="myFailureHandler"/>
        <remember-me key="myAppKey" user-service-ref="customService"/>
        <custom-filter before="FORM_LOGIN_FILTER" ref="facebookLoginFilter"/>
    </http>

    <beans:bean id="myFailureHandler" class="angularspringapp.services.authentication.AuthenticationFailureHandler"/>
    <beans:bean id="successHandler" class="angularspringapp.services.authentication.AuthenticationSuccessHandler"/>
    <beans:bean id="customService" class="angularspringapp.services.authentication.DBUserProvider"/>
    <beans:bean id="facebookProvider" class="angularspringapp.services.authentication.SocialUserProvider"/>
    <beans:bean id="facebookLoginFilter" class="angularspringapp.services.authentication.SocialAuthenticationFilter">
        <beans:property name="authenticationManager" ref="am"/>
    </beans:bean>

    <authentication-manager alias="am">
        <authentication-provider user-service-ref="customService">
        </authentication-provider>
        <!--<authentication-provider user-service-ref="clientDetailsUserService" />-->
    </authentication-manager>

    <!--oauth2-->

    <!--<beans:bean id="oauthAuthenticationEntryPoint"-->
          <!--class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">-->
        <!--<beans:property name="realmName" value="sparklr2" />-->
    <!--</beans:bean>-->

    <!--<beans:bean id="clientAuthenticationEntryPoint"-->
          <!--class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">-->
        <!--<beans:property name="realmName" value="sparklr2/client" />-->
        <!--<beans:property name="typeName" value="Basic" />-->
    <!--</beans:bean>-->

    <!--<beans:bean id="oauthAccessDeniedHandler"-->
          <!--class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />-->

    <!--<beans:bean id="clientCredentialsTokenEndpointFilter"-->
          <!--class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">-->
        <!--<beans:property name="authenticationManager" ref="am" />-->
    <!--</beans:bean>-->

    <!--<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased"-->
          <!--xmlns="http://www.springframework.org/schema/beans">-->
        <!--<constructor-arg>-->
            <!--<list>-->
                <!--<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />-->
                <!--<bean class="org.springframework.security.access.vote.RoleVoter" />-->
                <!--<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />-->
            <!--</list>-->
        <!--</constructor-arg>-->
    <!--</bean>-->

    <!--<authentication-manager alias="authenticationManager"-->
                            <!--xmlns="http://www.springframework.org/schema/security">-->
        <!--<authentication-provider>-->
            <!--<user-service id="userDetailsService">-->
                <!--<user name="marissa" password="koala" authorities="ROLE_USER" />-->
                <!--<user name="paul" password="emu" authorities="ROLE_USER" />-->
            <!--</user-service>-->
        <!--</authentication-provider>-->
    <!--</authentication-manager>-->

    <!--<beans:bean id="clientDetailsUserService"-->
          <!--class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">-->
        <!--<beans:constructor-arg ref="clientDetails" />-->
    <!--</beans:bean>-->

    <!--<beans:bean id="tokenStore"-->
          <!--class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />-->

    <!--<beans:bean id="tokenServices"-->
          <!--class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">-->
        <!--<beans:property name="tokenStore" ref="tokenStore" />-->
        <!--<beans:property name="supportRefreshToken" value="true" />-->
        <!--<beans:property name="clientDetailsService" ref="clientDetails" />-->
    <!--</beans:bean>-->

    <!--<oauth:authorization-server-->
            <!--client-details-service-ref="clientDetails" token-services-ref="tokenServices">-->
        <!--<oauth:authorization-code />-->
        <!--<oauth:implicit />-->
        <!--<oauth:refresh-token />-->
        <!--<oauth:client-credentials />-->
        <!--<oauth:password />-->
    <!--</oauth:authorization-server>-->

    <!--<oauth:resource-server id="resourceServerFilter"-->
                           <!--resource-id="sparklr" token-services-ref="tokenServices" />-->

    <!--<oauth:client-details-service id="clientDetails">-->
        <!--<oauth:client client-id="client1"-->
                      <!--authorized-grant-types="password,authorization_code,refresh_token,implicit"-->
                      <!--authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT" scope="read,write,trust"-->
                      <!--access-token-validity="60" />-->
        <!--<oauth:client client-id="client2"-->
                      <!--authorized-grant-types="password,authorization_code,refresh_token,implicit"-->
                      <!--secret="somesecret" authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT" />-->
        <!--<oauth:client client-id="client3"-->
                      <!--authorized-grant-types="client_credentials" authorities="ROLE_CLIENT"-->
                      <!--scope="read" secret="secret" />-->
        <!--<oauth:client client-id="client4"-->
                      <!--authorized-grant-types="authorization_code,implicit" authorities="ROLE_CLIENT" />-->
    <!--</oauth:client-details-service>-->

    <!--<oauth:expression-handler id="oauthExpressionHandler" />-->

    <!--<oauth:web-expression-handler id="oauthWebExpressionHandler" />-->
</beans:beans>